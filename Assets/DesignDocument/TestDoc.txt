编辑器拓展开发,xlua,shader,资源加载,网络+多线程
1.编辑器拓展开发
实现：一键快速标记ab,自动化命名ab,标记过的ab会显示在Framework
面板上,
可以点击选择在Assets窗体中快速锁定到该资源,也可以直接
取消标记移除资源;在Editor环境下可不用打AB包就加载该包中
的资源;打包AB功能.
打包生成的manifest文件内容如下：
============================================================
ManifestFileVersion: 0
CRC: 411294188
Hashes:
  AssetFileHash:
    serializedVersion: 2
    Hash: dd3f92c09a95451d70d525fc49bac8f6
  TypeTreeHash:
    serializedVersion: 2
    Hash: 5ad585dd02dfb5016c0dad519eab8f49
HashAppended: 0
ClassTypes:
- Class: 49
  Script: {instanceID: 0}
Assets:
- Assets/XLua/HotFix/Resources/lua/SelfieContron.lua.txt
- Assets/XLua/HotFix/Resources/lua/test2.lua.txt
- Assets/XLua/HotFix/Resources/lua/EndLoginManager.lua.txt
- Assets/XLua/HotFix/Resources/lua/json.lua.txt
- Assets/XLua/HotFix/Resources/lua/test.lua.txt
- Assets/XLua/HotFix/Resources/lua/LoginManager.lua.txt
Dependencies: []
============================================================
AssetBundleManifest中主要包含打包的文件路径
#Framework编辑器窗体实现：
实现一个窗体类继承EditorWindow,实现一个MenuItem方法打开窗体
OnGUI():Unity中通过代码驱动的GUI系统主要用来创建调试工具、创建
自定义属性面板、创建新的Editor窗口和工具达到扩展编辑器效果

2.xlua
num,bool,string,userdata,function,thread,table,nil
ipairs和pairs的区别：ipairs遍历到空值时会直接停下
配置：复制xLua文件夹到Assets文件夹下,Tools到根目录下,在ProjectSetting的脚本
宏定义中添加HOTFIX_ENABLE.生成xlua的映射代码，并注入到editor中.
LuaRun原理：
使用xLua虚拟机LuaEnv实例化一张Lua表,加载ab包中的lua字符串，将加载得到的lua
字符串写入到对应的表中,设置一些方法，常量与lua中的绑定.
静态方法调用：点号,非静态方法：冒号
xlua使用协程：
首先导入xlua的自带工具类(若要引用xlua文件，则须将xlua文件放在resources文件夹下)
local util = require 'xlua.util'
function UseCoroutine()
  return util.cs_generator(
    //code...
  )
end
#2.1更新策略
1.读取存储在本地的版本号.
2.从远端获取最新的版本号,若版本号一致,则直接加载当前本地AB包中的UI和逻辑代码
若不一致,则进入文件校验,使用HttpWebRequest的HEAD方法获取远端文件大小,再与本地文件
进行对比,若文件大小不一致则加入下载队列.
3.本地写入一个下载标记（表示是否在进行下载？）,如果没在下载,则删除本地文件,并将标记
设置为正在下载,下载：使用文件流打开要下载文件的路径,从远端拉去文件的大小,若不一致：
进行文件比对，从服务器获取服务器上的目标文件大小与本地文件的大小对比，若文件大小不一致,
则设置本地文件的写入起点（Seek）,并通过HttpWebRequuest设置下载大小进行下载,再将得到的
流写入到本地文件中.
4.下载完成后加载AB包,进入新的界面，重置下载标记,更换版本号.
-下载多个文件时,重复实例化下载线程进行多文件同步下载

3.HDRP后处理使用：
常用的后处理：HDRI SKY,Vignette,Exposure,White Balance,Ambient Occulusion,Shadows,Fog
,Bloom,Lift+Gamma+Gain,MotionBlur

4.批处理的使用：
动态批处理
原理：每一帧把可以进行批处理的模型网格进行合并，再把合并后模型数据传递给GPU，然后使用同一个材质对其渲染。
限制：
1.顶点属性要小于900。例如，如果shader中需要使用顶点位置、法线和纹理坐标这三个顶点属性，那么要想让模型能
够被动态批处理，它的顶点数目不能超过300。因此，优化策略就是shader的优化，少使用顶点属性，或者模型顶点数
要尽可能少。如果着色器使用顶点位置、法线和UV值三种属性，那么只能批处理300顶点以下的物体；如果着色器需要
使用顶点位置、法线、UV0、UV1和切向量，那只能批处理180顶点以下的物体。
2.多Pass的shader会中断批处理。
3.在unity5中，动态批处理对于模型缩放的限制已经不存在了。
4.使用光照纹理的物体需要小心处理。为了让这些物体可以被动态批处理，需要保证它们指向光照纹理中的同一位置。
心得：动态批处理条件相当苛刻。有时Unity动态批处理会自动完成，不需要我们操作。程序进行动态批处理后，物体
们会合并成为一个物体的子物体。DrawCall会下降很多，减少了那些被合并模型原来的DC值，效果立杆见影。 
三、静态批处理
原理：只在运行开始阶段，把需要进行静态批处理的模型合并到一个新的网格中，这意味着这些模型数据不可以在运行
时刻被移动。
优点：因为它只需要进行一次合并操作，因此比动态批处理更加高效。
缺点：需要占用更多的内存来存储合并后的几何结构。
操作：将Inspector面板右上角的Static勾选(实际上只需要勾选Batching Static即可)

5.优化的几种方式：
GPU优化:
静态批处理+动态批处理;降低模型顶点个数,使用LOD模型;压缩贴图,用16位代替32位.
Occulusion Culling(遮罩剔除),不在视野内的物体不渲染;使用光照贴图;如需可以不使用实时灯光;
尽量使用共用材质,可进行网格合并
CPU/代码优化：
避免过大的GC
字符串拼接使用StringBuilder，少使用foreach循环；使用结构体来代替类

6.做,维护项目时遇到的问题/困难：
项目代码耦合性太大,牵一发而动全身,修改一处的代码就需要改很多处.
优化帧数时,选择，寻找了很多优化方案

7.网络编程，异步编程
服务端框架：
开启服务器,异步开启监听响应客户端的连接(Socket.BeginAccept),将接收到的客户端socket存储到
单独的对象中,在对象中,我们对客户端进行消息接收并处理.
消息发送规则：我们用自己封装的数据类ByteBuffer进行消息发送,我们可以按照string,int等类型数据逐条写入,
写入数据时先写入数据的长度,最终发送时先发送整条数据的长度,再发送数据
客户端断开连接:当socket.EndReceive得到的长度=0时,则表示客户端断开了
例如：发送一则消息
       ("Login"+"hello"+123456)
       先发送Byte(14)
       后发送Byte(5)-Byte("Login")-Byte(5)-Byte("hello")-Byte(4)-Byte(123456)
消息解析:
      接收顺序:首先接收消息长度(长度=4),根据得到的总字符串长度去递归接收后面的字符.将得到的字符串
      创建为消息类单独处理.根据得到的数据解析获取要运行的功能(登录).
      这里使用了消息队列来对大量的消息处理.new了一个ConcurrentQueue消息队列的类开启线程来处理消息,
      当消息队列长度不等于0时，则继续取出消息队列中消息进行解析，通过反射调用对应功能
      使用EventWaitHandle可以对线程进行堵塞,实现异步编程
      描述消息队列如何运作+实现,描述网络传输,接收数据的格式,实现反射调用

8.shader

9.设计模式：单例模式,简单工厂模式,工厂模式,对象池模式

#常用的一些API:
AssetDatabase：Editor环境下的资源数据库（仅限在Unity编辑器下）
Selection：对Editor下选择的物体进行操作
AssetImporter:资源导入器
EditorWindow:编辑器窗体基类
ScriptableObject
Rect:代表一个矩形
unity协程是一个能够暂停协程执行，暂停后立即返回主函数，执行主函数剩余的部分，
直到中断指令完成后，从中断指令的下一行继续执行协程剩余的函数。函数体全部执行完成，
协程结束。
值类型转换为引用类型：装箱
引用类型转换为值类型：拆箱